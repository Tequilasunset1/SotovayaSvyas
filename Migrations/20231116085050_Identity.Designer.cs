// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SotovayaSvyas.Data;

#nullable disable

namespace SotovayaSvyas.Migrations
{
    [DbContext(typeof(MobileOperatorContext))]
    [Migration("20231116085050_Identity")]
    partial class Identity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SotovayaSvyas.Models.ServicesProvided", b =>
                {
                    b.Property<int>("ServicesProvidedsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicesProvidedsId"));

                    b.Property<int>("DataVolume")
                        .HasColumnType("int")
                        .HasColumnName("Data_volume");

                    b.Property<int>("QuantitySms")
                        .HasColumnType("int")
                        .HasColumnName("Quantity_sms");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("ServicesProvidedsId")
                        .HasName("PK__Services__3F66D2B7D38F7475");

                    b.ToTable("ServicesProvideds");
                });

            modelBuilder.Entity("SotovayaSvyas.Models.Subscriber", b =>
                {
                    b.Property<int>("SubscribersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscribersId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)")
                        .HasColumnName("FIO");

                    b.Property<string>("PassportDetails")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)")
                        .HasColumnName("Passport_details");

                    b.Property<int>("ServicesProvidedsId")
                        .HasColumnType("int");

                    b.Property<int>("TariffPlansId")
                        .HasColumnType("int");

                    b.Property<int>("TreatysId")
                        .HasColumnType("int");

                    b.HasKey("SubscribersId")
                        .HasName("PK__Subscrib__D3B28E2206A324B6");

                    b.HasIndex("ServicesProvidedsId");

                    b.HasIndex("TariffPlansId");

                    b.HasIndex("TreatysId");

                    b.HasIndex(new[] { "Address" }, "UQ__Subscrib__7D0C3F32C5425DF5")
                        .IsUnique();

                    b.HasIndex(new[] { "PassportDetails" }, "UQ__Subscrib__996F862029DF4124")
                        .IsUnique();

                    b.HasIndex(new[] { "Fio" }, "UQ__Subscrib__C1BEAA5C583422CD")
                        .IsUnique();

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("SotovayaSvyas.Models.TariffPlan", b =>
                {
                    b.Property<int>("TariffPlansId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TariffPlansId"));

                    b.Property<int>("PriceSms")
                        .HasColumnType("int")
                        .HasColumnName("PriceSMS");

                    b.Property<decimal>("SubscriptionIntercity")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_Intercity");

                    b.Property<decimal>("SubscriptionInternational")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_International");

                    b.Property<decimal>("SubscriptionLocal")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_Local");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(116)
                        .HasColumnType("nvarchar(116)");

                    b.Property<int>("TypeTariffId")
                        .HasColumnType("int");

                    b.HasKey("TariffPlansId")
                        .HasName("PK__TariffPl__AEC72B5593BD1AF4");

                    b.HasIndex("TypeTariffId");

                    b.HasIndex(new[] { "SubscriptionInternational" }, "UQ__TariffPl__36D06A79ACF72D4F")
                        .IsUnique();

                    b.HasIndex(new[] { "SubscriptionIntercity" }, "UQ__TariffPl__3BF7D183A237FDA0")
                        .IsUnique();

                    b.HasIndex(new[] { "SubscriptionLocal" }, "UQ__TariffPl__A0B914196E91CB7A")
                        .IsUnique();

                    b.HasIndex(new[] { "TypeName" }, "UQ__TariffPl__D4E7DFA80D903E9C")
                        .IsUnique();

                    b.ToTable("TariffPlans");
                });

            modelBuilder.Entity("SotovayaSvyas.Models.Treaty", b =>
                {
                    b.Property<int>("TreatysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatysId"));

                    b.Property<DateOnly>("DateConclusion")
                        .HasColumnType("date")
                        .HasColumnName("Date_conclusion");

                    b.Property<string>("Employee")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)")
                        .HasColumnName("FIO");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)")
                        .HasColumnName("Phone_number");

                    b.Property<string>("Tariff")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)");

                    b.HasKey("TreatysId")
                        .HasName("PK__Treatys__F60F2F5B08F1F255");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__Treatys__7E87EC674E5314DA")
                        .IsUnique();

                    b.HasIndex(new[] { "Employee" }, "UQ__Treatys__AA4A871479E8FE7D")
                        .IsUnique();

                    b.HasIndex(new[] { "Fio" }, "UQ__Treatys__C1BEAA5CF31AE092")
                        .IsUnique();

                    b.HasIndex(new[] { "Tariff" }, "UQ__Treatys__CB5FBF3F1BA48A48")
                        .IsUnique();

                    b.HasIndex(new[] { "DateConclusion" }, "UQ__Treatys__E79FB34C1A1B4270")
                        .IsUnique();

                    b.ToTable("Treatys");
                });

            modelBuilder.Entity("SotovayaSvyas.Models.TypeTariff", b =>
                {
                    b.Property<int>("TypeTariffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeTariffId"));

                    b.Property<string>("TariffName")
                        .IsRequired()
                        .HasMaxLength(111)
                        .HasColumnType("nvarchar(111)");

                    b.HasKey("TypeTariffId")
                        .HasName("PK__TypeTari__E4F258C712A4E4C9");

                    b.ToTable("TypeTariffs");
                });

            modelBuilder.Entity("SotovayaSvyas.Models.ViewAll", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)")
                        .HasColumnName("FIO");

                    b.Property<string>("PassportDetails")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)")
                        .HasColumnName("Passport_details");

                    b.Property<int>("PriceSms")
                        .HasColumnType("int")
                        .HasColumnName("PriceSMS");

                    b.Property<int>("ServicesProvidedsId")
                        .HasColumnType("int");

                    b.Property<int>("SubscribersId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubscriptionIntercity")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_Intercity");

                    b.Property<decimal>("SubscriptionInternational")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_International");

                    b.Property<decimal>("SubscriptionLocal")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_Local");

                    b.Property<int>("TariffPlansId")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(116)
                        .HasColumnType("nvarchar(116)");

                    b.ToTable((string)null);

                    b.ToView("View_AllS", (string)null);
                });

            modelBuilder.Entity("SotovayaSvyas.Models.ViewAllMeal", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)")
                        .HasColumnName("FIO");

                    b.Property<string>("PassportDetails")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)")
                        .HasColumnName("Passport_details");

                    b.Property<int>("PriceSms")
                        .HasColumnType("int")
                        .HasColumnName("PriceSMS");

                    b.Property<int>("SubscribersId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubscriptionIntercity")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_Intercity");

                    b.Property<decimal>("SubscriptionInternational")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_International");

                    b.Property<decimal>("SubscriptionLocal")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_Local");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(116)
                        .HasColumnType("nvarchar(116)");

                    b.ToTable((string)null);

                    b.ToView("View_AllMeals", (string)null);
                });

            modelBuilder.Entity("SotovayaSvyas.Models.ViewAllSub", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)")
                        .HasColumnName("FIO");

                    b.Property<string>("PassportDetails")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)")
                        .HasColumnName("Passport_details");

                    b.Property<int>("PriceSms")
                        .HasColumnType("int")
                        .HasColumnName("PriceSMS");

                    b.Property<int>("SubscribersId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubscriptionIntercity")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_Intercity");

                    b.Property<decimal>("SubscriptionInternational")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_International");

                    b.Property<decimal>("SubscriptionLocal")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_Local");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(116)
                        .HasColumnType("nvarchar(116)");

                    b.ToTable((string)null);

                    b.ToView("View_AllSub", (string)null);
                });

            modelBuilder.Entity("SotovayaSvyas.Models.ViewAllType", b =>
                {
                    b.Property<int>("PriceSms")
                        .HasColumnType("int")
                        .HasColumnName("PriceSMS");

                    b.Property<decimal>("SubscriptionIntercity")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_Intercity");

                    b.Property<decimal>("SubscriptionInternational")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_International");

                    b.Property<decimal>("SubscriptionLocal")
                        .HasColumnType("money")
                        .HasColumnName("Subscription_Local");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(116)
                        .HasColumnType("nvarchar(116)");

                    b.Property<int>("TypeTariffId")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("View_AllType", (string)null);
                });

            modelBuilder.Entity("SotovayaSvyas.Models.ViewNotAll", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(115)
                        .HasColumnType("nvarchar(115)")
                        .HasColumnName("FIO");

                    b.Property<int>("PriceSms")
                        .HasColumnType("int")
                        .HasColumnName("PriceSMS");

                    b.Property<int>("SubscribersId")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(116)
                        .HasColumnType("nvarchar(116)");

                    b.ToTable((string)null);

                    b.ToView("View_NotAll", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SotovayaSvyas.Models.Subscriber", b =>
                {
                    b.HasOne("SotovayaSvyas.Models.ServicesProvided", "ServicesProvideds")
                        .WithMany("Subscribers")
                        .HasForeignKey("ServicesProvidedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Subscribers_[ServicesProvideds");

                    b.HasOne("SotovayaSvyas.Models.TariffPlan", "TariffPlans")
                        .WithMany("Subscribers")
                        .HasForeignKey("TariffPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Subscribers_[TariffPlans");

                    b.HasOne("SotovayaSvyas.Models.Treaty", "Treatys")
                        .WithMany("Subscribers")
                        .HasForeignKey("TreatysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Subscribers_[Treatys");

                    b.Navigation("ServicesProvideds");

                    b.Navigation("TariffPlans");

                    b.Navigation("Treatys");
                });

            modelBuilder.Entity("SotovayaSvyas.Models.TariffPlan", b =>
                {
                    b.HasOne("SotovayaSvyas.Models.TypeTariff", "TypeTariff")
                        .WithMany("TariffPlans")
                        .HasForeignKey("TypeTariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TariffPlans_[TypeTariff");

                    b.Navigation("TypeTariff");
                });

            modelBuilder.Entity("SotovayaSvyas.Models.ServicesProvided", b =>
                {
                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("SotovayaSvyas.Models.TariffPlan", b =>
                {
                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("SotovayaSvyas.Models.Treaty", b =>
                {
                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("SotovayaSvyas.Models.TypeTariff", b =>
                {
                    b.Navigation("TariffPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
